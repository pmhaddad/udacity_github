What happens when you initialize a repository? Why do you need to do it?
	Git sets up the necessary "infrastructure" to start version control on that directory (which is now a repository).
	You need to use init to set up the environment.

	
How is the staging area different from the working directory and the repository? What value do you think it offers?
	The working directory represents the current situation of the directory as understood by the user OS.
	The repository represents the current situation of the directory as Git understand it.
	The staging area is different from both the wd and the repo, because it is only a temporary vessel for changes.
	We use the staging area to register the current state of part/the whole wd and then commit these versions into the repository.
	Also, the staging area allows one to undo any change, before submitting it to the repository.

	
How can you use the staging area to make sure you have one commit per logical change?
	One can use the staging area to make sure which changes are ready to be committed. It serves as a "draft" before the commit.
	One can put and remove files from the staging area before committing, etc.
	It also allows for one to make a lot of changes at once, in several files, even if they are not on the same logical change.
	With the staging area, one can divide this group of changes in logical groups.

	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When one is doing major changes on a repository, it may be useful to work on a separate branch. That way, user
	will be able to experiment at will, without worrying to much about breaking the repository. The original, working
	branch is preserved. Furthermore, one can work on experimental issues on the branched files, while working on 
	usual issues on the master branch.


How do the diagrams help you visualize the branch structure?
	Diagrams make it easy to show the connections between commits, especially when commits branch out.
	They also make it clear which commits are reachable for a given HEAD. It is also easy to see if there were
	changes in different branches at the same time (maybe a merge is needed?)


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The result is a merged branch that represents a repository containing all changes made separately in the merged branches.
	In the diagram, a merge is represented by a convergence of branches. This is appropriate because once two branches
	are merged, all commits from both branches are stored (and are accessible) on the merged branch.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	The pros of automatic merging is that it makes the merging process much more easy and fast.
	The cons of automatic merging is that in some special circumstance, Git may merge code that won't work.
	On the other hand, manually merging commits has the pro of being done with context in mind, allowing for the user to 
	define which is the code that should be preserved on the merged branch. The con is that this process can be very
	cumbersome.

